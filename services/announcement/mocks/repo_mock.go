// Code generated by MockGen. DO NOT EDIT.
// Source: announcement_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "anncouncement/pkg/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreateAnnouncement mocks base method.
func (m *MockIRepository) CreateAnnouncement(announcement *models.Announcement, userId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnouncement", announcement, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAnnouncement indicates an expected call of CreateAnnouncement.
func (mr *MockIRepositoryMockRecorder) CreateAnnouncement(announcement, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnouncement", reflect.TypeOf((*MockIRepository)(nil).CreateAnnouncement), announcement, userId)
}

// GetAnnouncement mocks base method.
func (m *MockIRepository) GetAnnouncement(id uint64) (*models.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnouncement", id)
	ret0, _ := ret[0].(*models.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnouncement indicates an expected call of GetAnnouncement.
func (mr *MockIRepositoryMockRecorder) GetAnnouncement(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnouncement", reflect.TypeOf((*MockIRepository)(nil).GetAnnouncement), id)
}

// GetAnnouncements mocks base method.
func (m *MockIRepository) GetAnnouncements(page, pageSize uint64) ([]models.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnouncements", page, pageSize)
	ret0, _ := ret[0].([]models.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnouncements indicates an expected call of GetAnnouncements.
func (mr *MockIRepositoryMockRecorder) GetAnnouncements(page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnouncements", reflect.TypeOf((*MockIRepository)(nil).GetAnnouncements), page, pageSize)
}

// SearchAnnouncements mocks base method.
func (m *MockIRepository) SearchAnnouncements(page, pageSize, minCost, maxCost uint64, order string) ([]models.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAnnouncements", page, pageSize, minCost, maxCost, order)
	ret0, _ := ret[0].([]models.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAnnouncements indicates an expected call of SearchAnnouncements.
func (mr *MockIRepositoryMockRecorder) SearchAnnouncements(page, pageSize, minCost, maxCost, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAnnouncements", reflect.TypeOf((*MockIRepository)(nil).SearchAnnouncements), page, pageSize, minCost, maxCost, order)
}
